{"version":3,"sources":["components/toolbar/logo.svg","components/toolbar/toolbar.component.jsx","components/body/me.jpg","components/body/body.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Toolbar","props","mode","className","src","logo","alt","style","color","title","onClick","handleClick","Body","canvas","document","querySelector","renderer","THREE","camera","position","z","scene","geometry","cubes","texture","load","me","material","map","cube","add","push","requestAnimationFrame","render","time","domElement","width","clientWidth","height","clientHeight","needResize","setSize","resizeRendererToDisplaySize","aspect","updateProjectionMatrix","forEach","ndx","rot","rotation","x","y","main","App","setState","isDark","state","appColour","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.46e7074c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\nimport './toolbar.styles.css';\r\nimport logo from './logo.svg';\r\nimport { FaMoon } from 'react-icons/fa';\r\nimport { BsFillSunFill } from 'react-icons/bs'\r\n\r\nexport function Toolbar(props) {\r\n    const isDark = props.mode;\r\n    if (isDark) { \r\n        return (\r\n            <div className=\"App-header-dark\">\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                <p className=\"Portfolio-text\" style={{color: '#49fb35'}}>Portfolio</p>\r\n                <h1 className=\"Name-text\" style={{color: '#49fb35'}}>James Gabbitus</h1>\r\n                <button className=\"Btn-light\" title=\"Light Mode\" onClick={props.handleClick}>\r\n                <BsFillSunFill color='yellow'></BsFillSunFill>\r\n                </button>   \r\n            </div>\r\n        );\r\n    }\r\n    return (\r\n        <div className=\"App-header-light\" >\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            <p className=\"Portfolio-text\" style={{color: '#49fb35'}}>Portfolio</p>\r\n            <h1 className=\"Name-text\" style={{color: '#49fb35'}}>James Gabbitus</h1>\r\n            <button className=\"Btn-dark\" title=\"Dark Mode\" onClick={props.handleClick}>\r\n                <FaMoon color='#F4F6F0'></FaMoon>\r\n            </button>   \r\n        </div>\r\n        \r\n    );\r\n}","export default __webpack_public_path__ + \"static/media/me.c0926fee.jpg\";","import React from \"react\";\r\nimport './body.styles.css';\r\nimport * as THREE from 'three';\r\nimport me from './me.jpg';\r\n\r\nexport function Body(props) {\r\n\r\n    function main() {\r\n        const canvas = document.querySelector('#c');\r\n        const renderer = new THREE.WebGLRenderer({canvas});\r\n      \r\n        const fov = 75;\r\n        const aspect = 2;  // the canvas default\r\n        const near = 0.1;\r\n        const far = 5;\r\n        const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\r\n        camera.position.z = 2;\r\n      \r\n        const scene = new THREE.Scene();\r\n      \r\n        const boxWidth = 1;\r\n        const boxHeight = 1;\r\n        const boxDepth = 1;\r\n        const geometry = new THREE.BoxGeometry(boxWidth, boxHeight, boxDepth);\r\n      \r\n        const cubes = [];  // just an array we can use to rotate the cubes\r\n        const texture = new THREE.TextureLoader().load( me );\r\n      \r\n        const material = new THREE.MeshBasicMaterial( { map: texture } );\r\n        const cube = new THREE.Mesh(geometry, material);\r\n        scene.add(cube);\r\n        cubes.push(cube);  // add to our list of cubes to rotate\r\n      \r\n        function resizeRendererToDisplaySize(renderer) {\r\n          const canvas = renderer.domElement;\r\n          const width = canvas.clientWidth;\r\n          const height = canvas.clientHeight;\r\n          const needResize = canvas.width !== width || canvas.height !== height;\r\n          if (needResize) {\r\n            renderer.setSize(width, height, false);\r\n          }\r\n          return needResize;\r\n        }\r\n      \r\n        function render(time) {\r\n          time *= 0.001;\r\n      \r\n          if (resizeRendererToDisplaySize(renderer)) {\r\n            const canvas = renderer.domElement;\r\n            camera.aspect = canvas.clientWidth / canvas.clientHeight;\r\n            camera.updateProjectionMatrix();\r\n          }\r\n      \r\n          cubes.forEach((cube, ndx) => {\r\n            const speed = .2 + ndx * .1;\r\n            const rot = time * speed;\r\n            cube.rotation.x = rot;\r\n            cube.rotation.y = rot;\r\n          });\r\n      \r\n          renderer.render(scene, camera);\r\n      \r\n          requestAnimationFrame(render);\r\n        }\r\n      \r\n        requestAnimationFrame(render);\r\n      }\r\n\r\n    \r\n\r\n    main();\r\n    \r\n    const isDark = props.mode;\r\n    if (isDark) { \r\n        return (\r\n            <div style={{height: '5000px'}} className=\"Dark-bg\">\r\n                <h1 className=\"Ay-2\">An empty portfolio</h1>\r\n\r\n            </div>\r\n        );\r\n    }\r\n    return (\r\n        <div style={{height: '0px'}} className=\"Light-bg\">\r\n            <h1 className=\"Ay-1\">An empty portfolio</h1>\r\n\r\n        </div>\r\n        \r\n    );\r\n    \r\n}","import { Component } from 'react';\nimport './App.css';\nimport { Toolbar } from './components/toolbar/toolbar.component';\nimport { Body } from './components/body/body.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      isDark: false,\n      appColour: ''\n    }\n  }\n\n  handleClick = () => {\n    this.setState({isDark: !this.state.isDark});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Toolbar \n          mode={this.state.isDark} \n          handleClick={this.handleClick}\n        />\n        <Body \n          mode={this.state.isDark}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}